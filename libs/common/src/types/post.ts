// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: post.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { User } from './auth';

export const protobufPackage = 'post';

export interface CreatePostRequest {
  content: string;
  image: string;
  categories: string[];
  userId: string;
}

export interface CreatePostResponse {
  post: Post | undefined;
}

export interface EditPostRequest {
  id: string;
  content: string;
  categories: string[];
  userId: string;
}

export interface EditPostResponse {
  edit: Edit | undefined;
}

export interface DeletePostRequest {
  id: string;
  userId: string;
}

export interface DeletePostResponse {
  success: boolean;
  message: string;
}

export interface ListPostsRequest {
  sortBy: string;
  category: string;
}

export interface ListPostsResponse {
  posts: Post[];
}

export interface GetPostByIdRequest {
  id: string;
  userId: string;
}

export interface GetPostByIdResponse {
  post: Post | undefined;
}

export interface Empty {}

export interface Post {
  id: string;
  content: string;
  image: Image | undefined;
  categories: string[];
  user: User | undefined;
  createdAt: string;
  updatedAt: string;
  upvotes: number;
  downvotes: number;
}

export interface Image {
  id: string;
  userId: string;
  url: string;
  createdAt: string;
}

export interface Edit {
  id: string;
  content: string;
  categories: string[];
  user: User | undefined;
}

export const POST_PACKAGE_NAME = 'post';

export interface PostServiceClient {
  createPost(request: CreatePostRequest): Observable<CreatePostResponse>;

  editPost(request: EditPostRequest): Observable<EditPostResponse>;

  deletePost(request: DeletePostRequest): Observable<DeletePostResponse>;

  listPosts(request: Empty): Observable<ListPostsResponse>;

  getPostById(request: GetPostByIdRequest): Observable<GetPostByIdResponse>;
}

export interface PostServiceController {
  createPost(
    request: CreatePostRequest,
  ):
    | Promise<CreatePostResponse>
    | Observable<CreatePostResponse>
    | CreatePostResponse;

  editPost(
    request: EditPostRequest,
  ):
    | Promise<EditPostResponse>
    | Observable<EditPostResponse>
    | EditPostResponse;

  deletePost(
    request: DeletePostRequest,
  ):
    | Promise<DeletePostResponse>
    | Observable<DeletePostResponse>
    | DeletePostResponse;

  listPosts(
    request: Empty,
  ):
    | Promise<ListPostsResponse>
    | Observable<ListPostsResponse>
    | ListPostsResponse;

  getPostById(
    request: GetPostByIdRequest,
  ):
    | Promise<GetPostByIdResponse>
    | Observable<GetPostByIdResponse>
    | GetPostByIdResponse;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createPost',
      'editPost',
      'deletePost',
      'listPosts',
      'getPostById',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('PostService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('PostService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const POST_SERVICE_NAME = 'PostService';
