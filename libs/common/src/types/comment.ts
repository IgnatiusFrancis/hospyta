// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: comment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { User } from '../../../../auth';

export const protobufPackage = 'comment';

export interface Comment {
  id: string;
  content: string;
  postId: string;
  userId: string;
  parentId: string;
  createdAt: string;
  user: User | undefined;
  replies: Comment[];
}

export interface AddCommentRequest {
  postId: string;
  content: string;
  userId: string;
}

export interface AddCommentResponse {
  comment: Comment | undefined;
}

export interface ReplyToCommentRequest {
  commentId: string;
  content: string;
  userId: string;
}

export interface ReplyToCommentResponse {
  comment: Comment | undefined;
}

export interface GetCommentsByPostIdRequest {
  postId: string;
}

export interface GetCommentsByPostIdResponse {
  comments: Comment[];
}

export const COMMENT_PACKAGE_NAME = 'comment';

export interface CommentServiceClient {
  addComment(request: AddCommentRequest): Observable<AddCommentResponse>;

  replyToComment(
    request: ReplyToCommentRequest,
  ): Observable<ReplyToCommentResponse>;

  getCommentsByPostId(
    request: GetCommentsByPostIdRequest,
  ): Observable<GetCommentsByPostIdResponse>;
}

export interface CommentServiceController {
  addComment(
    request: AddCommentRequest,
  ):
    | Promise<AddCommentResponse>
    | Observable<AddCommentResponse>
    | AddCommentResponse;

  replyToComment(
    request: ReplyToCommentRequest,
  ):
    | Promise<ReplyToCommentResponse>
    | Observable<ReplyToCommentResponse>
    | ReplyToCommentResponse;

  getCommentsByPostId(
    request: GetCommentsByPostIdRequest,
  ):
    | Promise<GetCommentsByPostIdResponse>
    | Observable<GetCommentsByPostIdResponse>
    | GetCommentsByPostIdResponse;
}

export function CommentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'addComment',
      'replyToComment',
      'getCommentsByPostId',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('CommentService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('CommentService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const COMMENT_SERVICE_NAME = 'CommentService';
